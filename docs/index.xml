<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Docs on Elwali Karkoub</title>
    <link>/docs/</link>
    <description>Recent content in Docs on Elwali Karkoub</description>
    <generator>Hugo -- 0.140.1</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Aug 2025 10:00:00 +0200</lastBuildDate>
    <atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Azure Signing Logs Missing from Wazuh Dashboard</title>
      <link>/docs/azure-signing-logs/</link>
      <pubDate>Fri, 22 Aug 2025 10:00:00 +0200</pubDate>
      <guid>/docs/azure-signing-logs/</guid>
      <description>&lt;h2 id=&#34;issue-description&#34;&gt;Issue Description&lt;/h2&gt;
&lt;p&gt;Azure sign-in logs (&lt;code&gt;auditLogs&lt;/code&gt;/&lt;code&gt;signIns&lt;/code&gt;) are processed by Wazuh manager and visible in alerts, but they don&amp;rsquo;t appear in the Wazuh Dashboard. This happens due to a field mapping conflict.&lt;/p&gt;
&lt;h3 id=&#34;the-error&#34;&gt;The Error&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mapper_parsing_exception&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;reason&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to parse field [data.ms-graph.status] of type [keyword]&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;root-cause&#34;&gt;Root Cause&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;status&lt;/code&gt; field in Azure logs contains a JSON object, but the Wazuh template expects it to be a keyword string.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;h3 id=&#34;temporary-fix&#34;&gt;Temporary Fix&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Edit the Wazuh template:&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo nano /etc/filebeat/wazuh-template.json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;Find the ms-graph section and update the status field:&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ms-graph&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;relationship&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;keyword&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dynamic&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;Apply the template:&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filebeat setup --index-management -E setup.template.json.enabled&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;Restart Filebeat:&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl restart filebeat
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;permanent-fix&#34;&gt;Permanent Fix&lt;/h3&gt;
&lt;p&gt;A permanent fix will be available in Wazuh 4.14 based on this PR: &lt;a href=&#34;https://github.com/wazuh/wazuh/pull/30831&#34;&gt;https://github.com/wazuh/wazuh/pull/30831&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>KnockKnock : Reveal Persistent MacOS installed softwares</title>
      <link>/docs/knockknock-reveal-persistent/</link>
      <pubDate>Sun, 03 Aug 2025 22:19:35 +0100</pubDate>
      <guid>/docs/knockknock-reveal-persistent/</guid>
      <description>&lt;p&gt;In post-incident malware investigations, fast and reliable tools are critical for uncovering persistence mechanisms. One such tool I recently discovered is KnockKnockâ€”a free, open-source utility by Objective-See that reveals persistently installed software components on macOS&lt;/p&gt;
&lt;h2 id=&#34;why-it-matters&#34;&gt;Why It Matters&lt;/h2&gt;
&lt;p&gt;Once malware infects a system, it typically establishes persistence through:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Launch Agents/Daemons&lt;/li&gt;
&lt;li&gt;Browser Extensions&lt;/li&gt;
&lt;li&gt;Cron Jobs&lt;/li&gt;
&lt;li&gt;Login Items&lt;/li&gt;
&lt;li&gt;Kernel Extensions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;KnockKnock automates detection of these persistence mechanisms, providing visibility into what&amp;rsquo;s set to automatically execute on your Mac.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wazuh Upgrade Permissions Fix</title>
      <link>/docs/wazuh-upgrade-permissions-fix/</link>
      <pubDate>Thu, 12 Jun 2025 23:56:46 +0100</pubDate>
      <guid>/docs/wazuh-upgrade-permissions-fix/</guid>
      <description>&lt;h1 id=&#34;updating-wazuh-manager-permissions-after-failed-upgrade&#34;&gt;Updating Wazuh Manager Permissions After Failed Upgrade&lt;/h1&gt;
&lt;p&gt;If your Wazuh manager upgrade fails due to permission issues, you may need to check the files permissions/ownership if they are still using the old ossec user/group.&lt;/p&gt;
&lt;h2 id=&#34;permission-update-commands&#34;&gt;Permission Update Commands&lt;/h2&gt;
&lt;p&gt;Run these commands to correct ownership:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Change ossec user/group to wazuh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find /var/ossec -group ossec -user ossec -exec chown wazuh:wazuh &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Change root-owned files to wazuh group&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find /var/ossec -group ossec -user root -exec chown root:wazuh &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;notes&#34;&gt;Notes:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;These commands recursively update ownership in the Wazuh directory&lt;/p&gt;</description>
    </item>
    <item>
      <title>Running PowerShell Commands on a Wodle Wazuh</title>
      <link>/docs/powershell-wodle/</link>
      <pubDate>Thu, 12 Jun 2025 23:09:38 +0100</pubDate>
      <guid>/docs/powershell-wodle/</guid>
      <description>&lt;h1 id=&#34;running-powershell-commands-on-a-wodle-in-wazuh&#34;&gt;Running PowerShell Commands on a Wodle in Wazuh&lt;/h1&gt;
&lt;p&gt;By executing PowerShell commands through a Wazuh Wodle and formatting the results in JSON, you can streamline log processing without the need for custom decoders. This method simplifies integrationâ€”only the corresponding rules need to be defined to handle the structured output effectively.&lt;/p&gt;
&lt;h2 id=&#34;powershell-command-format&#34;&gt;PowerShell Command Format&lt;/h2&gt;
&lt;p&gt;The recommended format for PowerShell commands in a Wodle is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Powershell -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@{ &amp;lt;header&amp;gt; = &amp;lt;command&amp;gt; } | ConvertTo-Json -compress&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; is the PowerShell cmdlet or one-liner script that outputs an object&lt;/p&gt;</description>
    </item>
    <item>
      <title>My Essential Docker Commands Cheat Sheet</title>
      <link>/docs/usefuldockercommands/</link>
      <pubDate>Sat, 07 Jun 2025 18:35:36 +0100</pubDate>
      <guid>/docs/usefuldockercommands/</guid>
      <description>&lt;p&gt;Docker commands I use regularly:&lt;/p&gt;
&lt;h2 id=&#34;1-complete-environment-cleanup&#34;&gt;1. Complete Environment Cleanup&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker-compose down --remove-orphans -v --rmi all
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--remove-orphans&lt;/code&gt;: Deletes containers for services not in compose file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-v&lt;/code&gt;: Removes attached volumes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--rmi all&lt;/code&gt;: Deletes all images used by services&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-run-image-with-interactive-shell&#34;&gt;2. Run Image with Interactive Shell&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it --entrypoint bash wazuh/wazuh-certs-generator:0.0.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it --entrypoint bash ubuntu:focal
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-it&lt;/code&gt;: Interactive terminal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--entrypoint bash&lt;/code&gt;: Overrides default to give shell access&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-find-container-ip-address&#34;&gt;3. Find Container IP Address&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker inspect -f &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;docker ps | grep -i dashboard | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker ps | grep -i dashboard&lt;/code&gt;: Finds container with &amp;ldquo;dashboard&amp;rdquo; in name&lt;/p&gt;</description>
    </item>
    <item>
      <title>Turning my Linux Mint Laptop into A server: Systemd targets &amp; logind</title>
      <link>/docs/linuxlaptopintoserverandclosethelid/</link>
      <pubDate>Sat, 08 Feb 2025 17:51:03 +0000</pubDate>
      <guid>/docs/linuxlaptopintoserverandclosethelid/</guid>
      <description>&lt;p&gt;I have been tinkering lately to build a home lab (K8s, Wazuh &amp;hellip;) and wanted to turn my old laptop (Running Linux Mint 21) into a server. While going through that process I had issues with configuring RDP (The session immediately closed after connecting) also I needed to be able to close the laptop&amp;rsquo;s lid while keeping it running.&lt;/p&gt;
&lt;p&gt;For the first issue, I was able to solve it by running the following and then reboot:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bluetooth Keyboard keeps dropping out connection</title>
      <link>/docs/bluetoothkeyboarddisconnecting/</link>
      <pubDate>Sun, 05 Jan 2025 22:22:38 +0000</pubDate>
      <guid>/docs/bluetoothkeyboarddisconnecting/</guid>
      <description>&lt;p&gt;For no specific reason I can tell my bluetooth keyboard SUBBLIM dropped the connection on my linux mint 21 machine. Bluetooth logs shows:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; bluetoothd[1109]: profiles/input/hog-lib.c:report_reference_cb() Read Report Reference descriptor failed: Request attribute has encountered an unlikely error
 bluetoothd[1109]: profiles/input/hog-lib.c:info_read_cb() HID Information read failed: Request attribute has encountered an unlikely error
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I procedded to solve it as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Install sudo apt-get install blueman
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;load module modprobe btusb 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Removed the bluetooth device from the UI or you can use the command &lt;code&gt;bluetoothctl remove 54:46:6E:2F:15:5B&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Check connectivity using only CURL</title>
      <link>/docs/curlconnectivity/</link>
      <pubDate>Sat, 28 Dec 2024 17:12:18 +0000</pubDate>
      <guid>/docs/curlconnectivity/</guid>
      <description>&lt;p&gt;I have had situations where I needed to check the connectivity using telnet but the server did not have it installed nor the possiblity to do so. I&amp;rsquo;ve found that it can be achieved using only curl:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl -vv telnet://serverIP:port&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will use the telnet portocol instead of the known http(s).&lt;/p&gt;
&lt;p&gt;curl support about 28 protocols that you can find here: &lt;a href=&#34;https://everything.curl.dev/protocols/curl.html&#34;&gt;https://everything.curl.dev/protocols/curl.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
